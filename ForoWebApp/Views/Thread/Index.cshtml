@model ThreadViewModel
@{
    ViewData["Title"] = "Thread";
    int lowerBound = PaginationUtilities.CalculateLowerBoundPage(Model.CurrentPage);
    int upperBound = PaginationUtilities.CalculateUpperBoundPage(Model.CurrentPage, Model.TotalPages);
}
@functions{
    string GetCarroPictureSrc()
    {
        var files = Directory.GetFiles("wwwroot/img/carros");
        int randomIndex = new Random().Next(files.Length);
        string fileName = System.IO.Path.GetFileName(files[randomIndex]);
        return $"/img/carros/{fileName}";
    }

    bool IsUserAdmin()
    {
        if(User.Identity.IsAuthenticated){
            var userRole = User.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Role);
            return userRole?.Value.ToLowerInvariant() == UserConstants.AdminRole.ToLowerInvariant();
        }
        return false;
    }
}
<div id="thread-container">
    <section class="without-bottom-corners">
        <div class="header-flex-container">
            <h1 class="thread-title">@Model.ThreadName</h1>
            @if (!Model.IsClosed)
            {
                <button class="rounded-button" alt="Crear Post" onclick="location.href='@Url.Action("NewPost","Post", new { threadId = Model.ThreadId })'">
                    <span class="inner-buttom-text">Crear post</span>
                </button>
            }
            else
            {

            }
            @if(IsUserAdmin() && !Model.IsClosed)
            {
                <form method="post" asp-controller="Thread" asp-action="CloseThread" asp-route-threadId="@Model.ThreadId">
                    <button type="submit" class="rounded-button close-thread-button" alt="Cerrar hilo">
                        <span class="inner-buttom-text">Cerrar hilo</span>
                    </button>
                </form>
            }
        </div>
    </section>
    @if(Model.TotalPages > 1)
    {
        <section class="pagenav-ribbon">
            @if (Model.CurrentPage > 1)
            {
                <a href="@Url.Action("Index", "Thread", new { id = Model.ThreadId, page = 1 })">
                    <span class="first-page-enabled">@PaginationUtilities.GetPageNumberForBound(1, lowerBound)</span>
                </a>
            }
            else
            {
                <span class="first-page-disabled"></span>
            }
            <div class="pagenav-middle-section">
                @if(Model.CurrentPage == 1)
                {
                    <span class="pagenav-left-disabled"></span>
                }
                else
                {
                    <a href="@Url.Action("Index", "Thread", new { id = Model.ThreadId, page = Model.CurrentPage - 1 })">
                        <span class="pagenav-left-enabled"></span>
                    </a>
                }
                <div class="pagenav-number-row">
                    @for (int pageNumber = lowerBound; pageNumber <= upperBound; pageNumber++)
                    {
                        if(pageNumber == Model.CurrentPage)
                        {
                            <span class="current-page">@pageNumber</span>
                        }
                        else
                        {
                            <a class="other-pages" href="@Url.Action("Index", "Thread", new { id = Model.ThreadId, page = pageNumber })">@pageNumber</a>
                        }
                    }
                </div>
                @if (Model.CurrentPage == Model.TotalPages)
                {
                    <span class="pagenav-right-disabled"></span>
                }
                else
                {
                    <a href="@Url.Action("Index", "Thread", new { id = Model.ThreadId, page = Model.CurrentPage + 1 })">
                        <span class="pagenav-right-enabled"></span>
                    </a>
                }
            </div>
            @if (Model.CurrentPage < Model.TotalPages)
            {
                <a href="@Url.Action("Index", "Thread", new { id = Model.ThreadId, page = Model.TotalPages })">
                    <span class="last-page-enabled">@PaginationUtilities.GetPageNumberForBound(upperBound, Model.TotalPages)</span>
                </a>
            }
            else
            {
                <span class="last-page-disabled"></span>
            }
        </section>
    }
    <div id="thread-posts">
        @foreach (var message in Model.Posts)
        {
            <div class="post-box">
                <section class="post-container">
                    <div>
                        <div class="message-header">
                            <!-- User profile picture and name-->
                            <div class="user-container">
                                <div id="user-profile-picture">
                                    <img class="user-profile-image" src="@GetCarroPictureSrc()" />
                                </div>
                                <div id="user-name-container">
                                    <div>
                                        <span class="user-name-text">@@@message.UserName</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Post date -->
                        <div class="post-date-container user-element-right">
                            <div id="post-date" title="@message.PostDate.ToString("yyyy/MM/dd - HH:mm")">
                                <span class="post-date-text">
                                    Publicado @DateFormatHelper.FormatDate(message.PostDate)
                                </span>
                            </div>
                        </div>
                        <separator class="post-separator"></separator>
                        <div id="post-message">
                            <table class="message-table">
                                <tbody>
                                    <tr style="font-size: 1rem; width: 100%">
                                        <td style="font-size: 1rem; width: 100%">
                                            @Html.Raw(message.Message)
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
            </div>
        }
    </div>
</div>
